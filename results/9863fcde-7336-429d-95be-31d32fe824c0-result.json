{"name": "test_login_corrent_userandPwd[CDBAdmin-CDBAdmin.123]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 124\nCurrent browser version is 123.0.6312.122 with binary path D:\\apploadpath\\chromePAth\\chrome-win32\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF7111C1502+60802]\n\t(No symbol) [0x00007FF71113AC02]\n\t(No symbol) [0x00007FF710FF7CE4]\n\t(No symbol) [0x00007FF711035942]\n\t(No symbol) [0x00007FF711034B42]\n\t(No symbol) [0x00007FF71102F8D3]\n\t(No symbol) [0x00007FF71102AA64]\n\t(No symbol) [0x00007FF711076037]\n\t(No symbol) [0x00007FF7110756B0]\n\t(No symbol) [0x00007FF71106A923]\n\t(No symbol) [0x00007FF711038FEC]\n\t(No symbol) [0x00007FF711039C21]\n\tGetHandleVerifier [0x00007FF7114C411D+3217821]\n\tGetHandleVerifier [0x00007FF7115060B7+3488055]\n\tGetHandleVerifier [0x00007FF7114FF03F+3459263]\n\tGetHandleVerifier [0x00007FF71127B846+823494]\n\t(No symbol) [0x00007FF711145F9F]\n\t(No symbol) [0x00007FF711140EC4]\n\t(No symbol) [0x00007FF711141052]\n\t(No symbol) [0x00007FF7111318A4]\n\tBaseThreadInitThunk [0x00007FFE208C7344+20]\n\tRtlUserThreadStart [0x00007FFE20C226B1+33]", "trace": "self = <class 'test_iot_login.test_pc_login.Test_login'>\n\n    @classmethod\n    def setup_class(self):\n        chrome_options = webdriver.ChromeOptions()\n        chrome_options.add_argument('--headless')  # 浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败\n        chrome_options.add_argument('--no-sandbox')  # 解决DevToolsActivePort文件不存在的报错\n        chrome_options.add_argument('--disable-dev-shm-usage')  # 可以不加这一条\n>       self.driver = webdriver.Chrome(options=chrome_options)\n\ntest_case\\test_iot_openBrowse\\base_driver_bowers.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\apploadpath\\pythonPath\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nD:\\apploadpath\\pythonPath\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\nD:\\apploadpath\\pythonPath\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\nD:\\apploadpath\\pythonPath\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nD:\\apploadpath\\pythonPath\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023C64991590>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF7111318A4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE208C7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE20C226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 124\nE       Current browser version is 123.0.6312.122 with binary path D:\\apploadpath\\chromePAth\\chrome-win32\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7111C1502+60802]\nE       \t(No symbol) [0x00007FF71113AC02]\nE       \t(No symbol) [0x00007FF710FF7CE4]\nE       \t(No symbol) [0x00007FF711035942]\nE       \t(No symbol) [0x00007FF711034B42]\nE       \t(No symbol) [0x00007FF71102F8D3]\nE       \t(No symbol) [0x00007FF71102AA64]\nE       \t(No symbol) [0x00007FF711076037]\nE       \t(No symbol) [0x00007FF7110756B0]\nE       \t(No symbol) [0x00007FF71106A923]\nE       \t(No symbol) [0x00007FF711038FEC]\nE       \t(No symbol) [0x00007FF711039C21]\nE       \tGetHandleVerifier [0x00007FF7114C411D+3217821]\nE       \tGetHandleVerifier [0x00007FF7115060B7+3488055]\nE       \tGetHandleVerifier [0x00007FF7114FF03F+3459263]\nE       \tGetHandleVerifier [0x00007FF71127B846+823494]\nE       \t(No symbol) [0x00007FF711145F9F]\nE       \t(No symbol) [0x00007FF711140EC4]\nE       \t(No symbol) [0x00007FF711141052]\nE       \t(No symbol) [0x00007FF7111318A4]\nE       \tBaseThreadInitThunk [0x00007FFE208C7344+20]\nE       \tRtlUserThreadStart [0x00007FFE20C226B1+33]\n\nD:\\apploadpath\\pythonPath\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "60eb8897-9241-4306-b2a7-eddc2f28b860-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "account", "value": "'CDBAdmin'"}, {"name": "pwd", "value": "'CDBAdmin.123'"}], "start": 1717383770068, "stop": 1717383770068, "uuid": "94672ed8-c9d6-44fa-b0c7-f10a6df401e6", "historyId": "ad99ff295a261289b4e9a77e43bcd58e", "testCaseId": "f5159c028274e00827ac1f834097ba28", "fullName": "test_case.test_iot_login.test_pc_login.Test_login#test_login_corrent_userandPwd", "labels": [{"name": "parentSuite", "value": "test_case.test_iot_login"}, {"name": "suite", "value": "test_pc_login"}, {"name": "subSuite", "value": "Test_login"}, {"name": "host", "value": "DESKTOP-SQSUSVC"}, {"name": "thread", "value": "18472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_iot_login.test_pc_login"}]}